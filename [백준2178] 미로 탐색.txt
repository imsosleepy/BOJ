import java.awt.Point;
import java.io.FileInputStream;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static int[][] matrix;
	static boolean[][] visit;
	static int row;
	static int col;

	public static void main(String[] args) throws Exception {
		Scanner sc = new Scanner(new FileInputStream("sample.txt"));
		//Scanner sc = new Scanner(System.in);
		row = sc.nextInt();
		col = sc.nextInt();
		
		matrix = new int[row+1][col+1];
		visit = new boolean[row+1][col+1];
		
		for(boolean[] visited:visit)
			Arrays.fill(visited, false);
		
		for(int[] mat:matrix)
			Arrays.fill(mat, 0);
		
		for(int i=1;i<=row;i++){
			String temp = sc.next();
			for(int j=1;j<=col;j++){
				matrix[i][j]=temp.charAt(j-1)-'0';
			}
		}
		
//		for(int i=1;i<=row;i++){
//			for(int j=1;j<=col;j++){
//				System.out.print(matrix[i][j] + " ");
//			}
//			System.out.println();
//		}
		bfs(1,1);
		
	}
	static void bfs(int x,int y){
		 int[] dy = { 0, 0, -1, 1 };
		 int[] dx = { -1, 1, 0, 0 };
		 int count=0;
		 int nx;
		 int ny;
		 
		 Point p = new Point();
		 Point temp = new Point();
		 p.x = x;
		 p.y = y;
		 visit[x][y] = true;
		 
		 int qSize;
		 Queue<Point> q = new LinkedList<Point>();
		 q.offer(p);
		 boolean finish = false;
		 
		 while(finish!=true){
			 qSize = q.size();
			 
			 for(int i=0;i<qSize;i++){
				 temp = q.poll();
				 if(temp.x==row && temp.y ==col){
					 count++;
					 System.out.println(count);
					 finish=true;
				 }
				 
				 for(int j=0;j<4;j++){
					 nx = temp.x+dx[j];
					 ny = temp.y+dy[j];
					
					 if(nx>row || nx <0 || ny>col || ny<0)
						 continue;
					 
					 if(matrix[nx][ny]==0) continue;
					 if(visit[nx][ny]==true) continue;
					 
					 Point np = new Point();
					 np.x = nx;
					 np.y = ny;
					 System.out.println("(" +nx + " " + ny+ ")");
					 visit[nx][ny] = true;
					 q.offer(np);
				 }
				 
			 }				 
			 count++;

		 }
	}
	
}
