
import java.awt.Point;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static int M;
	static int N;
	static int S;
	static int count;
	static int[][] arr;
	static boolean[][] visited;

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		int T = sc.nextInt();
		for (int i = 0; i < T; i++) {
			count = 0;
			M = sc.nextInt();
			N = sc.nextInt();
			S = sc.nextInt();
			arr = new int[N][M];
			visited = new boolean[N][M];
			for (int j = 0; j < S; j++) {
				int y = sc.nextInt();
				int x = sc.nextInt();
				arr[x][y] = 1;
				visited[x][y] = true;
			}
			for (int j = 0; j < N; j++) {
				for (int k = 0; k < M; k++) {
					if (visited[j][k] == true) {
						dfs(j, k);
						count++;
					}
				}
			}

			System.out.println(count);
		}

	}

//	static void bfs(int startx, int starty) {
//		visited[startx][starty] = false;
//		Queue<Point> q = new LinkedList<Point>();
//		Point p = new Point(startx, starty);
//		q.add(p);
//		int[] dx = { 1, -1, 0, 0 };
//		int[] dy = { 0, 0, -1, 1 };
//		while (!q.isEmpty()) {
//			Point cur = new Point();
//			cur = q.poll();
//			for (int i = 0; i < 4; i++) {
//				int nx = cur.x+dx[i];
//				int ny = cur.y+dy[i];
//				
//				if(nx<0 || ny<0 || nx>N-1 || ny>M-1) continue;
//				if(visited[nx][ny] == false) continue;
//				else{
//					Point newP = new Point(nx,ny);
//					visited[nx][ny] = false;
//					q.add(newP);
//				}
//			}
//		}
//		count++;
//
//	}
//}
	static void dfs(int x,int y){
		visited[x][y] = false;
		int[] dx = { 1, -1, 0, 0 };
		int[] dy = { 0, 0, -1, 1 };
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx < 0 || ny < 0 || nx > N - 1 || ny > M - 1)
				continue;
			if (visited[nx][ny] == false)
				continue;
			else {
				dfs(nx,ny);
			}
		}
	}
}