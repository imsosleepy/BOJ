import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;

public class Main {
	int N;
	int M;
	int[][] map;
	boolean[][] visited;
	Stack<robot> stack = new Stack<robot>();
	int count;

	public Main() {
		Scanner sc = new Scanner(System.in);

		N = sc.nextInt();
		M = sc.nextInt();

		robot bot1 = new robot(sc.nextInt(), sc.nextInt(), sc.nextInt());

		map = new int[N][M];
		visited = new boolean[N][M];

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				map[i][j] = sc.nextInt();
				if (map[i][j] == 1)
					visited[i][j] = true;
			}
		}

		// for(int i=0;i<N;i++) {
		// for(int j=0;j<M;j++) {
		// System.out.print(map[i][j] + " ");
		// }
		// System.out.println();
		// }

		bfs(bot1.getX(), bot1.getY(), bot1.getHead());
		System.out.println(count);
	}

	void bfs(int x, int y, int head) {
		visited[x][y] = true;
		map[x][y] = 2;
		count++;
		Queue<robot> q = new LinkedList<robot>();
		robot startRobot = new robot(x, y, head);

		q.offer(startRobot);
		stack.push(startRobot);
//		System.out.println("(" + x + "," + y + ")");
		int turnLeft = 0;
		boolean moveBack = false;
		while (!q.isEmpty()) {
			robot temp = q.poll();
			int direct = temp.head;
			int mx = 0, my = 0;

			// 네바퀴돌아봤는데 갈데가 없어서 뒤로간다.
			// 뒤로가는 중이다라는 트리거를 준다.
			if (turnLeft == 4) {
				moveBack = true;
				turnLeft = 0;
			}
			// 뒤로 가야하는 경우
			// 뒤로 한칸 가주고 다시 한바퀴 돌아야한다.
			if (moveBack == true) {
				if (direct == 0) {
					mx = 1;
					my = 0;
				}
				if (direct == 1) {
					mx = 0;
					my = -1;
				}
				if (direct == 2) {
					mx = -1;
					my = 0;
				}
				if (direct == 3) {
					mx = 0;
					my = 1;
				}
			}
			// 그외의 이동
			else if (direct == 0) {
				mx = 0;
				my = -1;
				direct = 3;
			} else if (direct == 1) {
				mx = -1;
				my = 0;
				direct = 0;
			} else if (direct == 2) {
				mx = 0;
				my = 1;
				direct = 1;
			} else if (direct == 3) {
				mx = 1;
				my = 0;
				direct = 2;
			}

			int nx = temp.getX() + mx;
			int ny = temp.getY() + my;

			// 벽일경우 정지조건이 필요, 그외엔 왼쪽으로 돈다.
			// 한번 왼쪽으로 돌았다. turnleft++
			if (map[nx][ny] == 1) {
				if (moveBack == true)
					break;
				turnLeft++;
				// 이전 상태를 뽑는다.
				robot robot = stack.pop();
				// 바라보는 방향을 바꿔준다.
				robot.head = direct;

				// 다시 큐와 스택에 삽입
				stack.push(robot);
				q.offer(robot);
				continue;
			}
			// 이미 방문한 곳일 경우
			// 한번 왼쪽으로 돌았다. turnleft++
			if (visited[nx][ny] == true) {
				if (moveBack == true) {
					robot backRobot = new robot(nx, ny, direct);
					q.offer(backRobot);
					stack.push(backRobot);
					moveBack = false;
				} else {
					moveBack = false;
					turnLeft++;
					// 이전 상태를 뽑는다.
					robot robot = stack.pop();
					// 바라보는 방향을 바꿔준다.
					robot.head = direct;

					// 다시 큐와 스택에 삽입
					stack.push(robot);
					q.offer(robot);
				}
				continue;
			}
			// 청소가능한 곳일 경우
			else {
				robot nextRobot = new robot(nx, ny, direct);
				visited[nx][ny] = true;
				map[nx][ny] = 2;
				stack.push(nextRobot);
				q.offer(nextRobot);
				turnLeft = 0;
				count++;
//				System.out.println("(" + nx + "," + ny + ")");
				// for (int i = 0; i < N; i++) {
				// for (int j = 0; j < M; j++) {
				// System.out.print(map[i][j] + " ");
				// }
				// System.out.println();
				// }
			}
		}
	}

	public static void main(String[] args) {
		new Main();
	}

	class robot {
		int x;
		int y;
		int head;

		public int getX() {
			return x;
		}

		public void setX(int x) {
			this.x = x;
		}

		public int getY() {
			return y;
		}

		public void setY(int y) {
			this.y = y;
		}

		public int getHead() {
			return head;
		}

		public void setHead(int head) {
			this.head = head;
		}

		public robot(int x, int y, int head) {
			this.x = x;
			this.y = y;
			this.head = head;
		}

	}
}
